# xsshunter.yml
---
- hosts: all
  become: yes
  become_method: sudo
  vars:
    packages:
      - python3
      - python3-pexpect
      - python-is-python3
      - python3-pip
      - python3-setuptools
      - python3-dev
      - python3-acme
      - libpq-dev
      - libffi-dev
      - python3-psycopg2
      - postgresql
      - postgresql-contrib
      - nginx
    ssl_common_name: "*.{{ domain_name }}"

  tasks:
    - name: Install required packages for XSSunter
      become: true
      apt:
        pkg: "{{ packages }}"
        state: present
        update_cache: yes


    - name: Install pipenv
      become: true
      pip:
        name: pipenv
        executable: pip3

    - name: Install boto
      become: true
      pip:
        name: boto
        executable: pip3

    - name: Install boto3
      become: true
      pip:
        name: boto3
        executable: pip3

    - name: Install virtualenv
      become: true
      pip:
        name: virtualenv
        executable: pip3

    - name: Install tornado
      become: true
      pip:
        name: tornado
        executable: pip3

    # enables set permissions to temp files to switch to posrgres user
    - name: install setfacl support
      become: yes
      apt: pkg=acl

    - name: Create a new database with name "xsshunter"
      become: true
      become_user: postgres
      postgresql_db:
        name: xsshunter
        template: template1

    - name: Connect to xsshunter database, create user, and grant access to database
      become: true
      become_user: postgres
      postgresql_user:
        db: xsshunter
        name: xsshunter
        password: "{{ postgres_password }}"
        expires: infinity

    - import_role:
        name: nginx

    - name: ensure nginx cert key dir
      file:
        path: "/etc/nginx/cert/private/"
        state: directory

    - name: ensure nginx csr key dir
      file:
        path: "/etc/nginx/ssl/csr/"
        state: directory

    - name: Generate an OpenSSL account key
      openssl_privatekey:
        path: "/etc/nginx/cert/private/account_{{ domain_name}}.key"

    - name: Generate an OpenSSL private key
      openssl_privatekey:
        path: "/etc/nginx/ssl/{{ domain_name}}.key"

    - name: Generate an OpenSSL Certificate Signing Request
      openssl_csr:
        path: "/etc/nginx/ssl/csr/{{ domain_name}}.csr"
        privatekey_path: "/etc/nginx/ssl/{{ domain_name}}.key"
        common_name: "{{ ssl_common_name }}"

    # this is a two stage process - create challenge and then fulfill challenge
    - name: "Create a challenge for {{ domain_name }} using a account key file."
      acme_certificate:
        acme_version: 2
        account_key_src: "/etc/nginx/cert/private/account_{{ domain_name}}.key"
        account_email: "{{ domain_name_account_email }}"
        src: "/etc/nginx/ssl/csr/{{ domain_name}}.csr"
        dest: "/etc/nginx/ssl/{{ domain_name }}.crt"
        fullchain_dest: "/etc/nginx/ssl/{{ domain_name }}-fullchain.crt"
        challenge: dns-01
        acme_directory: "{{ acme_url }}"
        terms_agreed: yes
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
      register: domain_name_challenge

    - name: Add challenge DNS record
      become: true
      become_user: ubuntu
      route53:
         zone: "{{ domain_name }}"
         record: "{{ domain_name_challenge.challenge_data[ ssl_common_name ]['dns-01'].record }}"
         type: TXT
         ttl: 60
         state: present
         wait: yes
         overwrite: yes
         # Note: item.value is a list of TXT entries, and route53
         # requires every entry to be enclosed in quotes
         value: "{{ domain_name_challenge.challenge_data[ ssl_common_name ]['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
      when: domain_name_challenge is changed

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      acme_certificate:
        account_key_src: "/etc/nginx/cert/private/account_{{ domain_name}}.key"
        account_email: "{{ domain_name_account_email }}"
        src: "/etc/nginx/ssl/csr/{{ domain_name}}.csr"
        cert: "/etc/nginx/ssl/{{ domain_name }}.crt"
        fullchain: "/etc/nginx/ssl/{{ domain_name }}fullchain.crt"
        chain: "/etc/nginx/ssl/{{ domain_name }}-intermediate.crt"
        challenge: dns-01
        acme_directory: "{{ acme_url }}"
        remaining_days: 60
        acme_version: 2
        terms_agreed: yes
        data: "{{ domain_name_challenge }}"
      when: domain_name_challenge is changed

    - name: Checkout XSSHunter from Repo
      git:
        repo: https://github.com/dextacy10-13/xsshunter
        dest: "{{ checkout_destination }}"
        update: yes
        force: yes

    - name: Generate XSSHunter config with multiple different responses
      expect:
        command: "python3 {{ checkout_destination }}/generate_config.py"
        responses:
            "(.*)Domain?": "{{ domain_name }}"
            "(.*)Mailgun API key(.*)": "{{ mailgun_api_key }}"
            "(.*)Mailgun domain:(.*)": "{{ mailgun_domain }}"
            "(.*)Sending email address(.*)": "{{ mail_from_email }}"
            "(.*)Contact email(.*)": "{{ abuse_contact_email }}"
            "(.*)Postgres username(.*)": "xsshunter"
            "(.*)Postgres password(.*)": "{{ postgres_password }}"
            "(.*)Postgres DB(.*)": "xsshunter"

    - name: Move XSSHunter nginx into place
      shell: cat default;cp default /etc/nginx/sites-enabled/default;nginx -t

    - name: Move config.yaml into place
      become: true
      shell: "mv /home/ubuntu/config.yaml {{ checkout_destination }}/config.yaml"

    - name: Activate API virtual env
      shell: |
          cd {{ checkout_destination }}/api/;
          virtualenv --python=python3 env;
          . env/bin/activate;
          pip3 install tornado;
          pip3 install dnspython;
          pip3 install pyaml;
          pip3 install -e git+git://github.com/tirkarthi/python-poster.git@master#egg=poster
          pip3 install -e git+git://github.com/tirkarthi/unirest-python.git@master#egg=unirest
          pip3 install -r requirements.txt;
          deactivate

    - name: Activate GUI virtual env
      shell: |
        cd {{ checkout_destination }}/gui/;
        virtualenv --python=python3 env
        . env/bin/activate
        pip3 install tornado;
        pip3 install dnspython;
        pip install -r requirements.txt
        deactivate

    - name: ensure permissions API
      file:
        path: "{{ checkout_destination }}/api"
        state: directory
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: ensure permissions Gui
      file:
        path: "{{ checkout_destination }}/gui"
        state: directory
        owner: ubuntu
        group: ubuntu
        recurse: yes